
The makefile allows the code to be compile with or without 
optimizations turned on and with or without the flags needed
for debugging.  Initially, it should be compiled without 
the optimization and debugging flags.  If you change the
makefile, you'll need to type make clean and then make
to create a new executable.

1) Run the program with a vector size of 1,000,000.  
(You'll need to omit the commas in the input to the program.)
What is the speedup?
Speedup: 0.723907


2) Run the program with a vector size of 100,000,000.  What is
the speedup?  

Speedup: 1.050158

3) Run the program with a vector size of 200,000,000.  What is
the speedup?  
Speedup: 1.068107


4) Why do you think the CPU performs better than the GPU for 
smaller vector sizes?
CPU is faster for an individual addition, also GPU requires a lot of setup (mallocs and the copying) thus giving more overhead to it.


5) Now, modify the makefile by commenting out the NVCCFLAGS 
that do not enable optimizations and uncommenting out the
NVCCFLAGS that enable optimizations.  Type, make clean and
make.  Run the program with a vector size of 100,000,000.
(You'll see that the optimizing compiler enables the
CPU version to easily outperform the GPU version. This GPU
code introduces a lot of overhead. Lots of threads are created
that do very little work.  Later, we'll investigate methods
for improvement.)
What is the speedup?
Speedup: 0.527348


6) Consider a vector size of 1,000,000.  
a. How many blocks are created by a kernel launch? 
ceil(1000000/512) = 1954

b. How many threads per block?
512

c. What is the total number of threads?
1954*512 = 1000448

d. How many of the threads will perform a vector addition?
1000000


7) Consider a vector size of 1048576 (2**20).
a. How many blocks are created by a kernel launch? 
2048
b. How many threads per block?
512
c. What is the total number of threads?
1048576
d. How many of the threads will perform a vector addition?
1048576, all of them...
